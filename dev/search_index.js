var documenterSearchIndex = {"docs":
[{"location":"assets/#Assets","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"assets/#Storages","page":"Assets","title":"Storages","text":"","category":"section"},{"location":"assets/#Batteries","page":"Assets","title":"Batteries","text":"","category":"section"},{"location":"assets/","page":"Assets","title":"Assets","text":"Genesys.AbstractLiion\nGenesys.Liion_rainflow\nGenesys.Liion_electro_chimique\nGenesys.Liion_fixed_lifetime\nGenesys.Liion_energy_exchanged","category":"page"},{"location":"assets/#Main.Genesys.AbstractLiion","page":"Assets","title":"Main.Genesys.AbstractLiion","text":"abstract type AbstractLiion <: AbstractStorage\n\nAn abstract type to generalize every Liion battery storage solution\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Liion_rainflow","page":"Assets","title":"Main.Genesys.Liion_rainflow","text":"Liion_rainflow\n\nA mutable struct that represents a Li-ion battery model with rainflow counting algorithm for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\nupdate_by_year::Int64: Rainflow SoH computation by year (default : 12)\nfatigue_data::DataFrames.DataFrame: DataFrame containing fatigue data (DoD, ncycle) (Default NMC battery data are provided)\n\nExample of usage : Liion_rainflow(update_by_year = 12, calendar = true, soc_model = \"linear\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Liion_electro_chimique","page":"Assets","title":"Main.Genesys.Liion_electro_chimique","text":"Liion_electro_chimique\n\nA mutable struct that represents a Li-ion battery aging model for State of Health (SoH) computation. This model is detailled in B. Xu et al. \"Modeling of Lithium-Ion Battery Degradation for Cell Life Assessment,\"  doi : 10.1109/TSG.2016.2578950, link.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\ntemperature::Float64: Temperature of the battery (no temprature model is implemented for the battery).\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\nupdate_by_year::Int64: Rainflow SoH computation by year (default : 12)\nfatigue_data::DataFrames.DataFrame: DataFrame containing fatigue data (DoD, ncycle) (Default NMC battery data are provided)\n\nExample of usage : Liion_electro_chimique(update_by_year = 12, soc_model = \"linear\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Liion_fixed_lifetime","page":"Assets","title":"Main.Genesys.Liion_fixed_lifetime","text":"Liionfixedlifetime\n\nA mutable struct that represents a Li-ion battery model with a linear calendar aging for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\n\nExample of usage : Liion_fixed_lifetime(;soc_model = \"polynomial\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Liion_energy_exchanged","page":"Assets","title":"Main.Genesys.Liion_energy_exchanged","text":"Liion_energy_exchanged\n\nA mutable struct that represents a Li-ion battery model Energy Throughput aging model for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nnCycle::Float64: Number of cycle before reaching EOL (should be found in the cycle to failure curve)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\n\nExample of usage : Liion_energy_exchanged(;calendar = true, nCycle = fatigue_data.cycle[findfirst(fatigue_data.DoD .> (0.6))], soc_model = \"polynomial\", couplage = (E=true, R=true))\n\nHere the nCycle is selected from the cycle to failure curve using 60% DoD.\n\n\n\n\n\n","category":"type"},{"location":"assets/#Thermal-Storage","page":"Assets","title":"Thermal Storage","text":"","category":"section"},{"location":"assets/","page":"Assets","title":"Assets","text":"Genesys.ThermalStorage","category":"page"},{"location":"assets/#Main.Genesys.ThermalStorage","page":"Assets","title":"Main.Genesys.ThermalStorage","text":"ThermalStorage\n\nA mutable struct representing a thermal energy storage model with various parameters, initial conditions, variables, and an inner constructor.\n\nFields\n\nα_p_ch::Float64: Maximum charging power factor\nα_p_dch::Float64: Maximum discharging power factor\nη_ch::Float64: Charging efficiency\nη_dch::Float64: Discharging efficiency\nη_self::Float64: Self-discharge rate\nα_soc_min::Float64: Minimum state of charge factor\nα_soc_max::Float64: Maximum state of charge factor\nlifetime::Int64: Storage lifetime in years\nbounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}}: Lower and upper bounds of storage capacity\nErated_ini::Float64: Initial rated storage energy capacity\nsoc_ini::Float64: Initial state of charge\nsoh_ini::Float64: Initial state of health\nErated::AbstractArray{Float64,2}: Rated storage energy capacity over time and scenarios\ncarrier::Heat: Heat carrier for the thermal storage\nsoc::AbstractArray{Float64,3}: State of charge over time, years, and scenarios\ncost::AbstractArray{Float64,2}: Cost of the thermal storage over time and scenarios\n\n\n\n\n\n","category":"type"},{"location":"assets/#Hydrogen","page":"Assets","title":"Hydrogen","text":"","category":"section"},{"location":"assets/","page":"Assets","title":"Assets","text":"Genesys.H2Tank","category":"page"},{"location":"assets/#Main.Genesys.H2Tank","page":"Assets","title":"Main.Genesys.H2Tank","text":"H2Tank\n\nA mutable struct representing a hydrogen tank storage model with various parameters, initial conditions, variables, and an inner constructor.\n\nFields\n\nα_p_ch::Float64: Maximum charging power factor (default: 1.5)\nα_p_dch::Float64: Maximum discharging power factor (default: 1.5)\nη_ch::Float64: Charging efficiency (default: 1.0)\nη_dch::Float64: Discharging efficiency (default: 1.0)\nη_self::Float64: Self-discharge rate (default: 0.0)\nα_soc_min::Float64: Minimum state of charge factor (default: 0.0)\nα_soc_max::Float64: Maximum state of charge factor (default: 1.0)\nlifetime::Int64: Storage lifetime in years (default: 25)\nbounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}}: Lower and upper bounds of storage capacity (default: (lb = 0., ub = 10000.))\nErated_ini::Float64: Initial rated storage energy capacity (default: 1e-6)\nsoc_ini::Float64: Initial state of charge (default: 0.5)\nsoh_ini::Float64: Initial state of health (default: 1.0)\nErated::AbstractArray{Float64,2}: Rated storage energy capacity over time and scenarios\ncarrier::Hydrogen: Hydrogen carrier for the H2 tank\nsoc::AbstractArray{Float64,3}: State of charge over time, years, and scenarios\ncost::AbstractArray{Float64,2}: Cost of the hydrogen storage over time and scenarios\n\n\n\n\n\n","category":"type"},{"location":"assets/#Carrier","page":"Assets","title":"Carrier","text":"","category":"section"},{"location":"assets/","page":"Assets","title":"Assets","text":"Genesys.EnergyCarrier\nGenesys.Electricity\nGenesys.Heat\nGenesys.Hydrogen","category":"page"},{"location":"assets/#Main.Genesys.EnergyCarrier","page":"Assets","title":"Main.Genesys.EnergyCarrier","text":"EnergyCarrier\n\nAn abstract type representing an energy carrier (e.g., Main.Genesys.Electricity, Main.Genesys.Heat, Main.Genesys.Hydrogen).\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Electricity","page":"Assets","title":"Main.Genesys.Electricity","text":"Electricity()\n\nA mutable struct representing electricity as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with electricity.\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Heat","page":"Assets","title":"Main.Genesys.Heat","text":"Heat()\n\nA mutable struct representing heat as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with heat.\n\n\n\n\n\n","category":"type"},{"location":"assets/#Main.Genesys.Hydrogen","page":"Assets","title":"Main.Genesys.Hydrogen","text":"Hydrogen()\n\nA mutable struct representing hydrogen as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with hydrogen.\n\n\n\n\n\n","category":"type"},{"location":"assets/#Demand","page":"Assets","title":"Demand","text":"","category":"section"},{"location":"assets/","page":"Assets","title":"Assets","text":"Genesys.Demand","category":"page"},{"location":"assets/#Main.Genesys.Demand","page":"Assets","title":"Main.Genesys.Demand","text":"Demand(; carrier = Electricity())\n\nA mutable struct representing energy demand in the grid. The struct is a subtype of AbstractDemand.\n\nFields\n\ncarrier::EnergyCarrier: The type of energy carrier for the demand (e.g., Electricity, Heat, etc.) this structre also contains the quantity for each timestamp. see Main.Genesys.EnergyCarrier\ntimestamp::Array{DateTime,3}: A 3-dimensional array of DateTime objects representing timestamps associated with the demand.\n\nExample\n\n```julia demand = Demand(carrier = Electricity())\n\n\n\n\n\n","category":"type"},{"location":"assets/","page":"Assets","title":"Assets","text":"outer","category":"page"},{"location":"page1/#Introduction-to-Genesys","page":"Page 1","title":"Introduction to Genesys","text":"","category":"section"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"Welcome to the Genesys module, a powerful tool for simulating and optimizing microgrids.","category":"page"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"In this page, we'll provide an overview of the main components and features of the Genesys module.","category":"page"},{"location":"page1/#Main-Components","page":"Page 1","title":"Main Components","text":"","category":"section"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"The Genesys module includes the following main components:","category":"page"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"Assets: Microgrid components, such as demand, solar, liion, thermal storage, and grid.\nScenarios: Tools for generating and reducing scenarios for simulations.\nOptimization: Design and operation optimization tools, including controllers and designers.\nSimulation: Functions for simulating microgrids over different time horizons and scenarios.\nUtils: Utilities for metrics, plotting, and data saving.","category":"page"},{"location":"page1/#Key-Features","page":"Page 1","title":"Key Features","text":"","category":"section"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"The Genesys module offers a wide range of features for microgrid simulations and optimizations:","category":"page"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"A flexible and extensible structure that allows for the incorporation of different asset types and optimization algorithms.\nA comprehensive set of optimization tools, including dummy, anticipative, rule-based control, and online learning for frequency control.\nScenario generation and reduction techniques for efficient and accurate simulations.\nBuilt-in plotting and metrics utilities for easy analysis and visualization of results.","category":"page"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"To learn more about how to use the Genesys module, please refer to the API Reference and other pages in this documentation.","category":"page"},{"location":"page1/#Functions","page":"Page 1","title":"Functions","text":"","category":"section"},{"location":"page1/","page":"Page 1","title":"Page 1","text":"Modules = [Main.Genesys]","category":"page"},{"location":"page1/#Main.Genesys.GlobalParameters","page":"Page 1","title":"Main.Genesys.GlobalParameters","text":"GlobalParameters(nh, ny, ns)\n\nStructure containing global parameter for the simulation and optimization.\n\nThis struct is contained inside the Microgrid struct and provide global parameters for sizing and simulating. Parameters are :\n\n(in sizing context) the number of operation and investment stages (ny, nh) or \n\n(in simulation context) Time horizon and number of operation per year (ny, nh); \n\nthe number of scenario (ns);\noptionnal : the yearly and hourly time steps (Δh, Δy) [default = (1,1)];\noptionnal : the inlation rate (τ) [default = 0.045];\noptionnal : the minimum renewable_share [default = 0.]\n\n\n\n\n\n","category":"type"},{"location":"page1/#Main.Genesys.Microgrid","page":"Page 1","title":"Main.Genesys.Microgrid","text":"Microgrid()\n\nStructure containing every element of the grid including immaterial ones like electrical  demands.\n\nThose elements are divided in 5 types and stored in 5 vectors with one field for each element of a type :\n\ndemands inheriting from AbstractDemand and containing a demand for each energy (Electricity and Heat);\ngenerations inheriting from AbstractGeneration and containing energy \n\nproduction/generation assets;\n\nstorages inheriting from AbstractStorage and containing energy storage assets;\nconverters inheriting from AbstractConverter and containing energy convertion assets;\ngrids inheriting from AbstractGrid and containing energy market assets \n\n(usually an external grid from which can be bought and sold energy);\n\nThese assets can be later added with the add!(mg::Microgrid, assets...)  See also Main.Genesys.add! for a step by step declaration\n\n\n\n\n\n","category":"type"},{"location":"page1/#Main.Genesys.Options","page":"Page 1","title":"Main.Genesys.Options","text":"Options\n\nA mutable struct representing the options for the simulation.\n\n\n\n\n\n","category":"type"},{"location":"page1/#Main.Genesys.Solar","page":"Page 1","title":"Main.Genesys.Solar","text":"Solar <: AbstractGeneration\n\nA mutable struct representing a solar power generation source. It contains information about the lifetime, bounds, initial conditions, variables, and costs related to the solar generation.\n\nParameters -lifetime::Int64 (default: 25): The lifetime of the solar power generation system. -bounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}} (default: (lb = 0., ub = 1000.)): The lower and upper bounds of the solar power generation system. -powerMax_ini::Float64 (default: 0.): The initial maximum power output of the solar power generation system. -soh_ini::Float64 (default: 1.): The initial state of health of the solar power generation system.\n\n\n\n\n\n","category":"type"},{"location":"page1/#Main.Genesys.add!-Tuple{Microgrid, Vararg{Any}}","page":"Page 1","title":"Main.Genesys.add!","text":"add!(mg::Microgrid, assets...)\n\nAdd to the given microgrid mg every asset listed as parameter into the appropriate  vector.\n\nMeanwhile data struct are created, they are sized according to the number of scenario, years, and hours per year, ns, ny, nh  resulting in 3D arrays\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics!-Tuple{Int64, Int64, H2Tank, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics!","text":"compute_investment_dynamics!(y::Int64, s::Int64, h2tank::H2Tank, decision::Union{Float64, Int64})\n\nCompute the investment dynamics of the hydrogen tank storage for a given year (y) and scenario (s), using the provided decision.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics!-Tuple{Int64, Int64, Solar, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics!","text":"compute_investment_dynamics!(y::Int64, s::Int64, pv::Solar, decision::Union{Float64, Int64})\n\nCompute the investment dynamics of the solar power generation system for a given year (y) and scenario (s), using the provided decision.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics!-Tuple{Int64, Int64, ThermalStorage, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics!","text":"compute_investment_dynamics!(y::Int64, s::Int64, tes::ThermalStorage, decision::Union{Float64, Int64})\n\nCompute the investment dynamics of the thermal energy storage for a given year (y) and scenario (s), using the given decision variable.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics-Tuple{H2Tank, NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics","text":"computeinvestmentdynamics(h2tank::H2Tank, state::NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, decision::Union{Float64, Int64})\n\nCompute the investment dynamics of the hydrogen tank storage for the given state and decision.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics-Tuple{Solar, NamedTuple{(:powerMax,), Tuple{Float64}}, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics","text":"computeinvestmentdynamics(pv::Solar, state::NamedTuple{(:powerMax,), Tuple{Float64}}, decision::Union{Float64, Int64})\n\nCompute the investment dynamics of the solar power generation system for the given state and decision.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_investment_dynamics-Tuple{ThermalStorage, NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, Union{Float64, Int64}}","page":"Page 1","title":"Main.Genesys.compute_investment_dynamics","text":"compute_operation_dynamics(tes::ThermalStorage, state::NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, decision::Float64, Δh::Int64)\n\nCompute the operation dynamics of the thermal energy storage, given the current state (Erated and soc), decision variable, and time step (Δh).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_operation_dynamics!-Tuple{Int64, Int64, Int64, H2Tank, Float64, Int64}","page":"Page 1","title":"Main.Genesys.compute_operation_dynamics!","text":"compute_operation_dynamics!(h::Int64, y::Int64, s::Int64, h2tank::H2Tank, decision::Float64, Δh::Int64)\n\nCompute the operation dynamics of the hydrogen tank storage for a given hour (h), year (y), and scenario (s), using the provided decision and time step (Δh).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_operation_dynamics!-Tuple{Int64, Int64, Int64, ThermalStorage, Float64, Int64}","page":"Page 1","title":"Main.Genesys.compute_operation_dynamics!","text":"compute_operation_dynamics!(h::Int64, y::Int64, s::Int64, tes::ThermalStorage, decision::Float64, Δh::Int64)\n\nCompute the operation dynamics of the thermal energy storage for a given hour (h), year (y), and scenario (s), using the given decision variable and time step (Δh).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.compute_operation_dynamics-Tuple{H2Tank, NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, Float64, Int64}","page":"Page 1","title":"Main.Genesys.compute_operation_dynamics","text":"compute_operation_dynamics(h2tank::H2Tank, state::NamedTuple{(:Erated, :soc), Tuple{Float64, Float64}}, decision::Float64, Δh::Int64)\n\nCompute the operation dynamics of the hydrogen tank storage for the given state, decision, and time step (Δh).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.isin-Tuple{Vector, DataType}","page":"Page 1","title":"Main.Genesys.isin","text":"isin(field::Vector, type::DataType)\n\nFind if the datatype is in a mg field and where it is\n\nFor a given vector field and a Datatype type, if an object of the type type is in field return true and the index of the type in the vector else return false and NaN.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.preallocate!-Tuple{H2Tank, Int64, Int64, Int64}","page":"Page 1","title":"Main.Genesys.preallocate!","text":"preallocate!(h2tank::H2Tank, nh::Int64, ny::Int64, ns::Int64)\n\nPreallocate memory for the H2Tank object with given dimensions for hours (nh), years (ny), and scenarios (ns).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.preallocate!-Tuple{Microgrid, AbstractController}","page":"Page 1","title":"Main.Genesys.preallocate!","text":"preallocate!(mg::Microgrid, controller::AbstractController)\n\nPreallocate abstract controller\n\nData struct are sized according to the number of scenario, years and hours per year  to store for each element to size a decision per operation stage.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.preallocate!-Tuple{Microgrid, AbstractDesigner}","page":"Page 1","title":"Main.Genesys.preallocate!","text":"preallocate!(mg::Microgrid, designer::AbstractDesigner)\n\nPreallocate abstract designer\n\nData struct are sized according to the number of scenario and years  to store for each element to size a decision per investment stage.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.preallocate!-Tuple{Solar, Int64, Int64, Int64}","page":"Page 1","title":"Main.Genesys.preallocate!","text":"preallocate!(pv::Solar, nh::Int64, ny::Int64, ns::Int64)\n\nPreallocate necessary arrays for the solar power generation model with the specified number of hours (nh), years (ny), and scenarios (ns).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.preallocate!-Tuple{ThermalStorage, Int64, Int64, Int64}","page":"Page 1","title":"Main.Genesys.preallocate!","text":"preallocate!(tes::ThermalStorage, nh::Int64, ny::Int64, ns::Int64)\n\nPreallocate memory for the ThermalStorage object with given dimensions for hours (nh), years (ny), and scenarios (ns).\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.simulate!-Tuple{Int64, Int64, Int64, Microgrid, AbstractController, AbstractDesigner, Scenarios, Main.Genesys.Options}","page":"Page 1","title":"Main.Genesys.simulate!","text":"simulate!(h::Int64, y::Int64, s::Int64, mg::Microgrid, controller::AbstractController, designer::AbstractDesigner, ω_simu::Scenarios, options::Options)\n\nSimulates the microgrid for a single hour within a given year and scenario.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.simulate!-Tuple{Int64, Int64, Microgrid, AbstractController, AbstractDesigner, Scenarios, Main.Genesys.Options}","page":"Page 1","title":"Main.Genesys.simulate!","text":"simulate!(y::Int64, s::Int64, mg::Microgrid, controller::AbstractController, designer::AbstractDesigner, ω_simu::Scenarios, options::Options)\n\nSimulates the microgrid for a single year within a given scenario.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.simulate!-Tuple{Int64, Microgrid, AbstractController, AbstractDesigner, Scenarios, Main.Genesys.Options}","page":"Page 1","title":"Main.Genesys.simulate!","text":"simulate!(s::Int64, mg::Microgrid, controller::AbstractController, designer::AbstractDesigner, ω_simu::Scenarios, options::Options)\n\nSimulates the microgrid for a single scenario.\n\n\n\n\n\n","category":"method"},{"location":"page1/#Main.Genesys.simulate!-Tuple{Microgrid, AbstractController, AbstractDesigner, Scenarios}","page":"Page 1","title":"Main.Genesys.simulate!","text":"simulate!(mg::Microgrid, controller::AbstractController, designer::AbstractDesigner, ω_simu::Scenarios; options::Options = Options())\n\nMain simulation function. Simulates the microgrid over multiple scenarios based on the given options.\n\n\n\n\n\n","category":"method"},{"location":"#Genesys-Package","page":"Home","title":"Genesys Package","text":"","category":"section"},{"location":"#Pkg-description","page":"Home","title":"Pkg description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Tool for sizing and simulating microgrid","category":"page"},{"location":"#Table-Of-Contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Assets","page":"Home","title":"Assets","text":"","category":"section"},{"location":"#Storages","page":"Home","title":"Storages","text":"","category":"section"},{"location":"#Batteries","page":"Home","title":"Batteries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Main.Genesys.AbstractLiion\nGenesys.Liion_rainflow\nGenesys.Liion_electro_chimique\nGenesys.Liion_fixed_lifetime\nGenesys.Liion_energy_exchanged","category":"page"},{"location":"#Thermal-Storage","page":"Home","title":"Thermal Storage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Genesys.ThermalStorage","category":"page"},{"location":"#Hydrogen","page":"Home","title":"Hydrogen","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Genesys.H2Tank","category":"page"},{"location":"#Carrier","page":"Home","title":"Carrier","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Genesys.EnergyCarrier\nGenesys.Electricity\nGenesys.Heat\nGenesys.Hydrogen","category":"page"},{"location":"#Demand","page":"Home","title":"Demand","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Genesys.Demand","category":"page"},{"location":"","page":"Home","title":"Home","text":"outer","category":"page"}]
}
