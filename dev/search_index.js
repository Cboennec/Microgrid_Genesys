var documenterSearchIndex = {"docs":
[{"location":"assets.html#Assets","page":"Assets","title":"Assets","text":"","category":"section"},{"location":"assets.html#Storages","page":"Assets","title":"Storages","text":"","category":"section"},{"location":"assets.html#Batteries","page":"Assets","title":"Batteries","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.AbstractLiion\nGenesys.Liion_rainflow\nGenesys.Liion_electro_chimique\nGenesys.Liion_fixed_lifetime\nGenesys.Liion_energy_exchanged","category":"page"},{"location":"assets.html#Main.Genesys.AbstractLiion","page":"Assets","title":"Main.Genesys.AbstractLiion","text":"abstract type AbstractLiion <: AbstractStorage\n\nAn abstract type to generalize every Liion battery storage solution\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Liion_rainflow","page":"Assets","title":"Main.Genesys.Liion_rainflow","text":"Liion_rainflow\n\nA mutable struct that represents a Li-ion battery model with rainflow counting algorithm for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\nupdate_by_year::Int64: Rainflow SoH computation by year (default : 12)\nfatigue_data::DataFrames.DataFrame: DataFrame containing fatigue data (DoD, ncycle) (Default NMC battery data are provided)\n\nExample of usage : Liion_rainflow(update_by_year = 12, calendar = true, soc_model = \"linear\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Liion_electro_chimique","page":"Assets","title":"Main.Genesys.Liion_electro_chimique","text":"Liion_electro_chimique\n\nA mutable struct that represents a Li-ion battery aging model for State of Health (SoH) computation. This model is detailled in B. Xu et al. \"Modeling of Lithium-Ion Battery Degradation for Cell Life Assessment,\"  doi : 10.1109/TSG.2016.2578950, link.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\ntemperature::Float64: Temperature of the battery (no temprature model is implemented for the battery).\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\nupdate_by_year::Int64: Rainflow SoH computation by year (default : 12)\nfatigue_data::DataFrames.DataFrame: DataFrame containing fatigue data (DoD, ncycle) (Default NMC battery data are provided)\n\nExample of usage : Liion_electro_chimique(update_by_year = 12, soc_model = \"linear\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Liion_fixed_lifetime","page":"Assets","title":"Main.Genesys.Liion_fixed_lifetime","text":"Liionfixedlifetime\n\nA mutable struct that represents a Li-ion battery model with a linear calendar aging for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\n\nExample of usage : Liion_fixed_lifetime(;soc_model = \"polynomial\", couplage = (E=true, R=true))\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Liion_energy_exchanged","page":"Assets","title":"Main.Genesys.Liion_energy_exchanged","text":"Liion_energy_exchanged\n\nA mutable struct that represents a Li-ion battery model Energy Throughput aging model for State of Health (SoH) computation.\n\nThe structure have a lot of parameters but most of them are set to default values.\n\nParameters:\n\nα_p_ch::Float64: Charging maximum C-rate (default : 1.5)\nα_p_dch::Float64: Discharging  maximum C-rate (default : 1.5)\nα_soc_min::Float64: Minimum threshold of charge (normalized) (default : 0.2)\nα_soc_max::Float64: Maximum threshold of charge (normalized) (default : 0.8)\nnCycle::Float64: Number of cycle before reaching EOL (should be found in the cycle to failure curve)\nSoH_threshold::Float64: SoH level to replace the battery (default : 0.8)\ncouplage::NamedTuple: Named tuple with two boolean values to indicate if the SoH should influence the other parameters (E stand for capacity coupling and R for efficiency coupling)\nsoc_model::String: Model name for State of Charge (SoC) computation. Available models are listed \ncalendar::Bool: Whether to include calendar aging in the SoH computation  (default : true)\nsoc_ini::Float64: Initial State of Charge (SoC) for the beginning of the simulation (default : 0.5)\nsoh_ini::Float64: Initial State of Health (SoH) for the beginning of the simulation (default : 1)\n\nExample of usage : Liion_energy_exchanged(;calendar = true, nCycle = fatigue_data.cycle[findfirst(fatigue_data.DoD .> (0.6))], soc_model = \"polynomial\", couplage = (E=true, R=true))\n\nHere the nCycle is selected from the cycle to failure curve using 60% DoD.\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Thermal-Storage","page":"Assets","title":"Thermal Storage","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.ThermalStorage","category":"page"},{"location":"assets.html#Main.Genesys.ThermalStorage","page":"Assets","title":"Main.Genesys.ThermalStorage","text":"ThermalStorage\n\nA mutable struct representing a thermal energy storage model with various parameters, initial conditions, variables, and an inner constructor.\n\nFields\n\nα_p_ch::Float64: Maximum charging power factor\nα_p_dch::Float64: Maximum discharging power factor\nη_ch::Float64: Charging efficiency\nη_dch::Float64: Discharging efficiency\nη_self::Float64: Self-discharge rate\nα_soc_min::Float64: Minimum state of charge factor\nα_soc_max::Float64: Maximum state of charge factor\nlifetime::Int64: Storage lifetime in years\nbounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}}: Lower and upper bounds of storage capacity\nErated_ini::Float64: Initial rated storage energy capacity\nsoc_ini::Float64: Initial state of charge\nsoh_ini::Float64: Initial state of health\nErated::AbstractArray{Float64,2}: Rated storage energy capacity over time and scenarios\ncarrier::Heat: Heat carrier for the thermal storage\nsoc::AbstractArray{Float64,3}: State of charge over time, years, and scenarios\ncost::AbstractArray{Float64,2}: Cost of the thermal storage over time and scenarios\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Hydrogen","page":"Assets","title":"Hydrogen","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.H2Tank","category":"page"},{"location":"assets.html#Main.Genesys.H2Tank","page":"Assets","title":"Main.Genesys.H2Tank","text":"H2Tank\n\nA mutable struct representing a hydrogen tank storage model with various parameters, initial conditions, variables, and an inner constructor.\n\nFields\n\nα_p_ch::Float64: Maximum charging power factor (default: 1.5)\nα_p_dch::Float64: Maximum discharging power factor (default: 1.5)\nη_ch::Float64: Charging efficiency (default: 1.0)\nη_dch::Float64: Discharging efficiency (default: 1.0)\nη_self::Float64: Self-discharge rate (default: 0.0)\nα_soc_min::Float64: Minimum state of charge factor (default: 0.0)\nα_soc_max::Float64: Maximum state of charge factor (default: 1.0)\nlifetime::Int64: Storage lifetime in years (default: 25)\nbounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}}: Lower and upper bounds of storage capacity (default: (lb = 0., ub = 10000.))\nErated_ini::Float64: Initial rated storage energy capacity (default: 1e-6)\nsoc_ini::Float64: Initial state of charge (default: 0.5)\nsoh_ini::Float64: Initial state of health (default: 1.0)\nErated::AbstractArray{Float64,2}: Rated storage energy capacity over time and scenarios\ncarrier::Hydrogen: Hydrogen carrier for the H2 tank\nsoc::AbstractArray{Float64,3}: State of charge over time, years, and scenarios\ncost::AbstractArray{Float64,2}: Cost of the hydrogen storage over time and scenarios\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Generation","page":"Assets","title":"Generation","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.Solar","category":"page"},{"location":"assets.html#Main.Genesys.Solar","page":"Assets","title":"Main.Genesys.Solar","text":"Solar <: AbstractGeneration\n\nA mutable struct representing a solar power generation source. It contains information about the lifetime, bounds, initial conditions, variables, and costs related to the solar generation.\n\nParameters -lifetime::Int64 (default: 25): The lifetime of the solar power generation system. -bounds::NamedTuple{(:lb, :ub), Tuple{Float64, Float64}} (default: (lb = 0., ub = 1000.)): The lower and upper bounds of the solar power generation system. -powerMax_ini::Float64 (default: 0.): The initial maximum power output of the solar power generation system. -soh_ini::Float64 (default: 1.): The initial state of health of the solar power generation system.\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Carrier","page":"Assets","title":"Carrier","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.EnergyCarrier\nGenesys.Electricity\nGenesys.Heat\nGenesys.Hydrogen","category":"page"},{"location":"assets.html#Main.Genesys.EnergyCarrier","page":"Assets","title":"Main.Genesys.EnergyCarrier","text":"EnergyCarrier\n\nAn abstract type representing an energy carrier (e.g., Main.Genesys.Electricity, Main.Genesys.Heat, Main.Genesys.Hydrogen).\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Electricity","page":"Assets","title":"Main.Genesys.Electricity","text":"Electricity()\n\nA mutable struct representing electricity as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with electricity.\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Heat","page":"Assets","title":"Main.Genesys.Heat","text":"Heat()\n\nA mutable struct representing heat as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with heat.\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Main.Genesys.Hydrogen","page":"Assets","title":"Main.Genesys.Hydrogen","text":"Hydrogen()\n\nA mutable struct representing hydrogen as an energy carrier. It is a subtype of EnergyCarrier.\n\nFields\n\npower::AbstractArray{Float64,3}: A 3-dimensional array of power values associated with hydrogen.\n\n\n\n\n\n","category":"type"},{"location":"assets.html#Demand","page":"Assets","title":"Demand","text":"","category":"section"},{"location":"assets.html","page":"Assets","title":"Assets","text":"Genesys.Demand","category":"page"},{"location":"assets.html#Main.Genesys.Demand","page":"Assets","title":"Main.Genesys.Demand","text":"Demand(; carrier = Electricity())\n\nA mutable struct representing energy demand in the grid. The struct is a subtype of AbstractDemand.\n\nFields\n\ncarrier::EnergyCarrier: The type of energy carrier for the demand (e.g., Electricity, Heat, etc.) this structre also contains the quantity for each timestamp. see Main.Genesys.EnergyCarrier\ntimestamp::Array{DateTime,3}: A 3-dimensional array of DateTime objects representing timestamps associated with the demand.\n\nExample\n\ndemand = Demand(carrier = Electricity())\n\n\n\n\n\n","category":"type"},{"location":"assets.html","page":"Assets","title":"Assets","text":"outer","category":"page"},{"location":"page1.html#Introduction-to-Genesys","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"","category":"section"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"Welcome to the Genesys module, a powerful tool for simulating and optimizing microgrids.","category":"page"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"In this page, we'll provide an overview of the main components and features of the Genesys module.","category":"page"},{"location":"page1.html#Main-Components","page":"Introduction to Genesys","title":"Main Components","text":"","category":"section"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"The Genesys module includes the following main components:","category":"page"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"Assets: Microgrid components, such as demand, solar, liion, thermal storage, and grid.\nScenarios: Tools for generating and reducing scenarios for simulations.\nOptimization: Design and operation optimization tools, including controllers and designers.\nSimulation: Functions for simulating microgrids over different time horizons and scenarios.\nUtils: Utilities for metrics, plotting, and data saving.","category":"page"},{"location":"page1.html#Key-Features","page":"Introduction to Genesys","title":"Key Features","text":"","category":"section"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"The Genesys module offers a wide range of features for microgrid simulations and optimizations:","category":"page"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"A flexible and extensible structure that allows for the incorporation of different asset types and optimization algorithms.\nA comprehensive set of optimization tools, including dummy, anticipative, rule-based control, and online learning for frequency control.\nScenario generation and reduction techniques for efficient and accurate simulations.\nBuilt-in plotting and metrics utilities for easy analysis and visualization of results.","category":"page"},{"location":"page1.html","page":"Introduction to Genesys","title":"Introduction to Genesys","text":"To learn more about how to use the Genesys module, please refer to the API Reference and other pages in this documentation.","category":"page"},{"location":"page1.html#Functions","page":"Introduction to Genesys","title":"Functions","text":"","category":"section"},{"location":"index.html#Genesys-Package","page":"Genesys Package","title":"Genesys Package","text":"","category":"section"},{"location":"index.html#Pkg-description","page":"Genesys Package","title":"Pkg description","text":"","category":"section"},{"location":"index.html","page":"Genesys Package","title":"Genesys Package","text":"Tool for sizing and simulating microgrid","category":"page"},{"location":"index.html#Table-Of-Contents","page":"Genesys Package","title":"Table Of Contents","text":"","category":"section"},{"location":"index.html","page":"Genesys Package","title":"Genesys Package","text":"","category":"page"}]
}
